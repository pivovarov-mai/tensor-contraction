# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Ansave/tensor-contraction/blob/master/HW1.ipynb

Группа: М8О-107М-22

Студент: Савельев А.С.

##Задание
Имеются 5 тензоров: А, В, С, D, E, которые соединены как на рисунке. Задача - осуществить свертку тремя способами:


1.   Используя цикл for;
2.   Используя функции reshape и матричное произведение;
3.   Используя пакет ncon.

Сравнить способы:

Итогом свертки будет некий тензор R валентности 3.

"""

from ncon import ncon
import numpy as np
import time

# Свёртка через for
def convolution_for(a, b, c, d, e):

  start = time.time()
  ac = np.zeros((1, 2, 7, 5, 8))
  for i in range(1):
    for j in range(2):
      for k in range(7):
        for l in range(5):
          for m in range(8):
            for n in range(6): 
              ac[i,j,k,l,m] = ac[i,j,k,l,m] + a[i,j,n] * c[n,k,l,m]

  acb = np.zeros((1, 5, 8, 1, 3))
  for i in range(1):
    for l in range(5):
      for m in range(8):
        for f in range(1):
          for o in range(3):
            for p in range(2):
              for r in range(7):  
                acb[i,l,m,f,o] = acb[i,l,m,f,o] + ac[i,p,r,l,m] * b[p,r,o,f]
  
  acbe = np.zeros((1, 5, 1, 4))
  for i in range(1):
    for l in range(5):
      for f in range(1):
        for s in range(4):
          for t in range(8):
            for u in range(3):
              acbe[i,l,f,s] = acbe[i,l,f,s] + acb[i,l,t,f,u] * e[u,t,s]
  
  result  = np.zeros((1, 1, 1))
  for i in range(1):
    for f in range(1):
      for h in range(1):
        for q in range(5):
          for r in range(4):
            result[i,f,h] =  result[i,f,h] + acbe[i,q,f,r] + d[r,q,h]
  
  print("\nЧерез For:")
  print(f"Shape = {result.shape}")
  print(f"Результат: {result}")
  print(f"Врем выполнения: {time.time() - start}")

# Свёртка через reshape
def convolution_reshape(a, b, c, d, e):

  start = time.time()
  ac = np.tensordot(a,c, axes=([2],[0]))
  acb = np.tensordot(ac,b, axes=([1,2],[0,1]))
  acbe = np.tensordot(acb,e, axes=([2,3],[1,0]))
  result = np.tensordot(acbe,d, axes=([1,2],[1,2]))

  print("\nЧерез RESHAPE")
  print(f"Shape = {result.shape}")
  print(f"Результат: {result}")
  print(f"Врем выполнения: {time.time() - start}")

# Свёртка через ncon
def convolution_ncon(a, b, c, d, e):

  start = time.time()
  result = ncon((a, b, c, d, e), ([-1, 1, 5], [1, 6, 2, -2], [5, 6, 4, 7], [3, 4, -3], [2, 7, 3]))

  print("\nЧерез NCON")
  print(f"Shape = {result.shape}")
  print(f"Результат: {result}")
  print(f"Врем выполнения: {time.time() - start}")

a = np.random.uniform(-1,1,(1, 2, 6))
b = np.random.uniform(-1,1,(2, 7, 3, 1))
c = np.random.uniform(-1,1,(6, 7, 5, 8))
d = np.random.uniform(-1,1,(4, 5, 1))
e = np.random.uniform(-1,1,(3, 8, 4))
convolution_for(a, b, c, d, e)
convolution_reshape(a, b, c, d, e)
convolution_ncon(a, b, c, d, e)